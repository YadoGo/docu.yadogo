"use strict";(self.webpackChunkyadogo_docu=self.webpackChunkyadogo_docu||[]).push([[137],{3905:(e,n,a)=>{a.d(n,{Zo:()=>d,kt:()=>y});var t=a(7294);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var c=t.createContext({}),s=function(e){var n=t.useContext(c),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},d=function(e){var n=s(e.components);return t.createElement(c.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(a),m=i,y=u["".concat(c,".").concat(m)]||u[m]||p[m]||r;return a?t.createElement(y,o(o({ref:n},d),{},{components:a})):t.createElement(y,o({ref:n},d))}));function y(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=a[s];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},668:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var t=a(7462),i=(a(7294),a(3905));const r={sidebar_label:"Arquitectura",sidebar_position:2},o="Arquitectura de una Aplicaci\xf3n Frontend en Angular",l={unversionedId:"front/arquitectura",id:"front/arquitectura",title:"Arquitectura de una Aplicaci\xf3n Frontend en Angular",description:"Angular utiliza una arquitectura basada en componentes y un patr\xf3n de dise\xf1o llamado Model-View-Controller (MVC) o Model-View-ViewModel (MVVM) para organizar y gestionar la estructura de la aplicaci\xf3n. La arquitectura de una aplicaci\xf3n Angular t\xedpica consta de los siguientes elementos:",source:"@site/docs/front/arquitectura.md",sourceDirName:"front",slug:"/front/arquitectura",permalink:"/yadogo-docu/docs/front/arquitectura",draft:!1,editUrl:"https://yadogo.github.io/yadogo-docu/docs/front/arquitectura.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Arquitectura",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Hello World",permalink:"/yadogo-docu/docs/front/introduction"},next:{title:"Backend",permalink:"/yadogo-docu/docs/category/backend"}},c={},s=[{value:"M\xf3dulos",id:"m\xf3dulos",level:2},{value:"Componentes",id:"componentes",level:2},{value:"Plantillas HTML",id:"plantillas-html",level:2},{value:"Servicios",id:"servicios",level:2},{value:"Directivas",id:"directivas",level:2},{value:"Enrutamiento",id:"enrutamiento",level:2},{value:"Inyecci\xf3n de Dependencias",id:"inyecci\xf3n-de-dependencias",level:2},{value:"Data Binding",id:"data-binding",level:2}],d={toc:s},u="wrapper";function p(e){let{components:n,...a}=e;return(0,i.kt)(u,(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"arquitectura-de-una-aplicaci\xf3n-frontend-en-angular"},"Arquitectura de una Aplicaci\xf3n Frontend en Angular"),(0,i.kt)("p",null,"Angular utiliza una arquitectura basada en componentes y un patr\xf3n de dise\xf1o llamado Model-View-Controller (MVC) o Model-View-ViewModel (MVVM) para organizar y gestionar la estructura de la aplicaci\xf3n. La arquitectura de una aplicaci\xf3n Angular t\xedpica consta de los siguientes elementos:"),(0,i.kt)("h2",{id:"m\xf3dulos"},"M\xf3dulos"),(0,i.kt)("p",null,"Los m\xf3dulos son bloques de construcci\xf3n fundamentales en una aplicaci\xf3n Angular. Representan una funcionalidad o caracter\xedstica espec\xedfica y agrupan componentes, servicios y otros elementos relacionados. Cada aplicaci\xf3n Angular tiene al menos un m\xf3dulo ra\xedz, conocido como el m\xf3dulo principal (app.module.ts), que importa otros m\xf3dulos y define los componentes principales de la aplicaci\xf3n."),(0,i.kt)("h2",{id:"componentes"},"Componentes"),(0,i.kt)("p",null,"Los componentes son unidades independientes y reutilizables que manejan la l\xf3gica de presentaci\xf3n y la interacci\xf3n con el usuario. Cada componente est\xe1 formado por una plantilla HTML que define la vista y una clase TypeScript que contiene la l\xf3gica y los datos del componente. Los componentes se pueden anidar y se comunican entre s\xed mediante propiedades de entrada y eventos de salida."),(0,i.kt)("h2",{id:"plantillas-html"},"Plantillas HTML"),(0,i.kt)("p",null,"Las plantillas HTML definen la estructura y el contenido visual de los componentes. Utilizan directivas de Angular para controlar el flujo de la aplicaci\xf3n y para interactuar con el modelo de datos."),(0,i.kt)("h2",{id:"servicios"},"Servicios"),(0,i.kt)("p",null,"Los servicios son clases que contienen l\xf3gica compartida y datos que pueden ser utilizados por varios componentes. Estos servicios proporcionan funcionalidades como obtener datos de un servidor, manejar la l\xf3gica de negocios y gestionar el estado de la aplicaci\xf3n."),(0,i.kt)("h2",{id:"directivas"},"Directivas"),(0,i.kt)("p",null,"Las directivas son instrucciones en el DOM que extienden el comportamiento de los elementos HTML. Angular ofrece directivas incorporadas, como ngIf, ngFor y ngStyle, y tambi\xe9n permite crear directivas personalizadas para extender la funcionalidad de los elementos HTML."),(0,i.kt)("h2",{id:"enrutamiento"},"Enrutamiento"),(0,i.kt)("p",null,"El enrutamiento en Angular permite navegar entre diferentes vistas y componentes en una aplicaci\xf3n de p\xe1gina \xfanica (SPA). Utiliza un enrutador que mapea URL a componentes espec\xedficos y permite la navegaci\xf3n mediante enlaces y redireccionamientos."),(0,i.kt)("h2",{id:"inyecci\xf3n-de-dependencias"},"Inyecci\xf3n de Dependencias"),(0,i.kt)("p",null,"Angular utiliza el patr\xf3n de inyecci\xf3n de dependencias para proporcionar instancias de clases necesarias a otros componentes o servicios. Esto facilita la creaci\xf3n y gesti\xf3n de instancias y ayuda a mantener la modularidad y la reutilizaci\xf3n de c\xf3digo."),(0,i.kt)("h2",{id:"data-binding"},"Data Binding"),(0,i.kt)("p",null,"Angular ofrece una variedad de formas de enlazar datos entre la vista y el modelo de datos. El data binding bidireccional permite que los cambios en la vista se reflejen autom\xe1ticamente en el modelo y viceversa."),(0,i.kt)("p",null,"En resumen, la arquitectura de una aplicaci\xf3n frontend en Angular se basa en componentes reutilizables, enrutamiento para la navegaci\xf3n, inyecci\xf3n de dependencias para la gesti\xf3n de objetos y servicios para compartir la l\xf3gica com\xfan. Estos conceptos trabajan juntos para crear aplicaciones web eficientes y mantenibles."))}p.isMDXComponent=!0}}]);