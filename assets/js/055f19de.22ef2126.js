"use strict";(self.webpackChunkyadogo_docu=self.webpackChunkyadogo_docu||[]).push([[844],{3905:(e,a,r)=>{r.d(a,{Zo:()=>d,kt:()=>f});var t=r(7294);function n(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function o(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?o(Object(r),!0).forEach((function(a){n(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function l(e,a){if(null==e)return{};var r,t,n=function(e,a){if(null==e)return{};var r,t,n={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],a.indexOf(r)>=0||(n[r]=e[r]);return n}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=t.createContext({}),s=function(e){var a=t.useContext(c),r=a;return e&&(r="function"==typeof e?e(a):i(i({},a),e)),r},d=function(e){var a=s(e.components);return t.createElement(c.Provider,{value:a},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(r),m=n,f=u["".concat(c,".").concat(m)]||u[m]||p[m]||o;return r?t.createElement(f,i(i({ref:a},d),{},{components:r})):t.createElement(f,i({ref:a},d))}));function f(e,a){var r=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var c in a)hasOwnProperty.call(a,c)&&(l[c]=a[c]);l.originalType=e,l[u]="string"==typeof e?e:n,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7546:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var t=r(7462),n=(r(7294),r(3905));const o={sidebar_label:"Flujo de trabajo de Gitflow",sidebar_position:2},i="Flujo de trabajo de Gitflow",l={unversionedId:"git/branch",id:"git/branch",title:"Flujo de trabajo de Gitflow",description:"Gitflow es un modelo de flujo de trabajo de Git que proporciona una estructura organizada para gestionar el desarrollo de proyectos. Utiliza ramas de funci\xf3n y varias ramas principales para mantener un historial claro y permitir una colaboraci\xf3n m\xe1s eficiente entre los miembros del equipo.",source:"@site/docs/git/branch.md",sourceDirName:"git",slug:"/git/branch",permalink:"/yadogo-docu/docs/git/branch",draft:!1,editUrl:"https://yadogo.github.io/yadogo-docu/docs/git/branch.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Flujo de trabajo de Gitflow",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Conventional Commit",permalink:"/yadogo-docu/docs/git/conventional_commit"},next:{title:"Gitflow Commands",permalink:"/yadogo-docu/docs/git/gitflow_commands"}},c={},s=[{value:"Ramas main y de develop",id:"ramas-main-y-de-develop",level:2},{value:"Ramas de feature",id:"ramas-de-feature",level:2},{value:"Ramas de release",id:"ramas-de-release",level:2},{value:"Ramas de correcci\xf3n (Hotfix)",id:"ramas-de-correcci\xf3n-hotfix",level:2},{value:"Recursos",id:"recursos",level:2}],d={toc:s},u="wrapper";function p(e){let{components:a,...r}=e;return(0,n.kt)(u,(0,t.Z)({},d,r,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"flujo-de-trabajo-de-gitflow"},"Flujo de trabajo de Gitflow"),(0,n.kt)("p",null,"Gitflow es un modelo de flujo de trabajo de Git que proporciona una estructura organizada para gestionar el desarrollo de proyectos. Utiliza ramas de funci\xf3n y varias ramas principales para mantener un historial claro y permitir una colaboraci\xf3n m\xe1s eficiente entre los miembros del equipo."),(0,n.kt)("h2",{id:"ramas-main-y-de-develop"},"Ramas main y de develop"),(0,n.kt)("p",null,"En Gitflow, se utilizan dos ramas principales para mantener el historial del proyecto:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"main:")," Es la rama principal que almacena el historial de las versiones oficiales del proyecto. Cada vez que se complete una versi\xf3n estable, se fusionar\xe1 con esta rama.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"develop:")," Es la rama de integraci\xf3n donde se combinan las caracter\xedsticas y cambios terminados antes de realizar una nueva versi\xf3n. Es a partir de esta rama que se bifurcan las ramas de funci\xf3n."))),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://wac-cdn.atlassian.com/dam/jcr:a13c18d6-94f3-4fc4-84fb-2b8f1b2fd339/01%20How%20it%20works.svg?cdnVersion=1107",alt:"img main develop"}),"\nPara iniciar Gitflow, primero necesitas asegurarte de tener una rama main existente. Luego, desde la rama main, creas la rama develop utilizando el siguiente comando:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"git checkout -b develop main\n")),(0,n.kt)("h2",{id:"ramas-de-feature"},"Ramas de feature"),(0,n.kt)("p",null,"En Gitflow, cada nueva caracter\xedstica o cambio significativo se desarrolla en su propia rama de feature. Estas ramas se crean a partir de la rama develop y se fusionan nuevamente en ella una vez que la funci\xf3n est\xe1 completa."),(0,n.kt)("p",null,"Para crear una nueva rama de funci\xf3n, puedes usar el siguiente comando:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-shell"},"git checkout -b feature/nombre-de-la-feature develop\n\n")),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://wac-cdn.atlassian.com/dam/jcr:34c86360-8dea-4be4-92f7-6597d4d5bfae/02%20Feature%20branches.svg?cdnVersion=1107",alt:null}),"\nTrabaja en la rama de funci\xf3n como lo har\xedas normalmente, realizando los cambios necesarios para la nueva caracter\xedstica. Una vez que hayas terminado, realiza la fusi\xf3n de la rama de funci\xf3n en develop:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"git checkout develop\ngit merge feature/nombre-de-la-feature\n")),(0,n.kt)("h2",{id:"ramas-de-release"},"Ramas de release"),(0,n.kt)("p",null,"Cuando develop contiene suficientes caracter\xedsticas para una nueva versi\xf3n o cuando se acerca la fecha de publicaci\xf3n programada, se crea una rama de release. Esta rama se utiliza para preparar la versi\xf3n final antes de lanzarla."),(0,n.kt)("p",null,"Para crear una rama de release, utiliza el siguiente comando:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"git checkout -b release/version-x.x.x develop\n")),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://wac-cdn.atlassian.com/dam/jcr:8f00f1a4-ef2d-498a-a2c6-8020bb97902f/03%20Release%20branches.svg?cdnVersion=1107",alt:null}),"\nRealiza los \xfaltimos ajustes, correcci\xf3n de errores y pruebas en esta rama de release. Una vez que todo est\xe1 listo, fusiona la rama de release en main y develop, y etiqueta la versi\xf3n:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"git checkout main\ngit merge release/version-x.x.x\n\ngit checkout develop\ngit merge release/version-x.x.x\n\ngit tag -a version-x.x.x\n")),(0,n.kt)("h2",{id:"ramas-de-correcci\xf3n-hotfix"},"Ramas de correcci\xf3n (Hotfix)"),(0,n.kt)("p",null,'Las ramas de correcci\xf3n, tambi\xe9n conocidas como "hotfix", se utilizan para corregir problemas cr\xedticos en la versi\xf3n actual en producci\xf3n. Estas ramas se crean directamente desde main para asegurar una correcci\xf3n r\xe1pida.'),(0,n.kt)("p",null,"Para crear una rama de correcci\xf3n, puedes utilizar:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"git checkout -b hotfix/nombre-del-hotfix main\n")),(0,n.kt)("p",null,"Una vez que hayas hecho las correcciones necesarias, fusiona la rama de correcci\xf3n en main y develop, y etiqueta la versi\xf3n corregida:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"git checkout main\ngit merge hotfix/nombre-del-hotfix\n\ngit checkout develop\ngit merge hotfix/nombre-del-hotfix\n\ngit tag -a version-corregida\n")),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://wac-cdn.atlassian.com/dam/jcr:cc0b526e-adb7-4d45-874e-9bcea9898b4a/04%20Hotfix%20branches.svg?cdnVersion=1107",alt:null})),(0,n.kt)("p",null,"Recuerda eliminar las ramas de funci\xf3n y de correcci\xf3n una vez que se han fusionado para mantener el repositorio limpio:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"git branch -d feature/nombre-de-la-funcion\ngit branch -d hotfix/nombre-del-hotfix\n")),(0,n.kt)("h2",{id:"recursos"},"Recursos"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.atlassian.com/es/git/tutorials/comparing-workflows/gitflow-workflow"},"https://www.atlassian.com/es/git/tutorials/comparing-workflows/gitflow-workflow"))))}p.isMDXComponent=!0}}]);