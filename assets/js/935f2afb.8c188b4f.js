"use strict";(self.webpackChunkyadogo_docu=self.webpackChunkyadogo_docu||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"Frontend","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Hello World","href":"/yadogo-docu/docs/front/introduction","docId":"front/introduction"},{"type":"link","label":"Arquitectura","href":"/yadogo-docu/docs/front/arquitectura","docId":"front/arquitectura"}],"href":"/yadogo-docu/docs/category/frontend"},{"type":"category","label":"Backend","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"hello","href":"/yadogo-docu/docs/back/hello","docId":"back/hello"}],"href":"/yadogo-docu/docs/category/backend"},{"type":"category","label":"Git","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Conventional Commit","href":"/yadogo-docu/docs/git/conventional_commit","docId":"git/conventional_commit"},{"type":"link","label":"Flujo de trabajo de Gitflow","href":"/yadogo-docu/docs/git/branch","docId":"git/branch"},{"type":"link","label":"Gitflow Commands","href":"/yadogo-docu/docs/git/gitflow_commands","docId":"git/gitflow_commands"}],"href":"/yadogo-docu/docs/category/git"}]},"docs":{"back/hello":{"id":"back/hello","title":"hello","description":"","sidebar":"tutorialSidebar"},"front/arquitectura":{"id":"front/arquitectura","title":"Arquitectura de una Aplicaci\xf3n Frontend en Angular","description":"Angular utiliza una arquitectura basada en componentes y un patr\xf3n de dise\xf1o llamado Model-View-Controller (MVC) o Model-View-ViewModel (MVVM) para organizar y gestionar la estructura de la aplicaci\xf3n. La arquitectura de una aplicaci\xf3n Angular t\xedpica consta de los siguientes elementos:","sidebar":"tutorialSidebar"},"front/introduction":{"id":"front/introduction","title":"Hello World","description":"","sidebar":"tutorialSidebar"},"git/branch":{"id":"git/branch","title":"Flujo de trabajo de Gitflow","description":"Gitflow es un modelo de flujo de trabajo de Git que proporciona una estructura organizada para gestionar el desarrollo de proyectos. Utiliza ramas de funci\xf3n y varias ramas principales para mantener un historial claro y permitir una colaboraci\xf3n m\xe1s eficiente entre los miembros del equipo.","sidebar":"tutorialSidebar"},"git/conventional_commit":{"id":"git/conventional_commit","title":"Conventional Commit","description":"En el desarrollo de software, los \\"Conventional Commits\\" (Commits Convencionales) son una convenci\xf3n para escribir mensajes de commit que siguen un formato estructurado y consistente. Esta pr\xe1ctica se ha vuelto popular en proyectos de c\xf3digo abierto y en la comunidad de desarrollo en general debido a su claridad, legibilidad y facilidad para automatizar ciertas tareas relacionadas con el versionado del software y la generaci\xf3n de cambios.","sidebar":"tutorialSidebar"},"git/gitflow_commands":{"id":"git/gitflow_commands","title":"gitflow_commands","description":"GitFlow es una estrategia de ramificaci\xf3n de Git que se utiliza com\xfanmente en proyectos de desarrollo de software. Es una metodolog\xeda para gestionar ramas y flujos de trabajo en un repositorio Git, lo que ayuda a mantener una estructura organizada y facilita la colaboraci\xf3n entre desarrolladores. A continuaci\xf3n, te proporcionar\xe9 los pasos b\xe1sicos para implementar GitFlow en un proyecto:","sidebar":"tutorialSidebar"}}}')}}]);